name: Test Sonar Cloud
on:
  workflow_dispatch:
env:
  PYTHON_VERSION: '3.8'
  ACR_NAME: mroi
jobs:
  qaqc-checks-pylint:
    name: Run QA-QC checks with PyLint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from remote origin.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Generate logs for reporting using pylint.
        run: |
          pip install pylint
          pylint app -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --exit-zero > pylint.log
      - name: Upload linting errors to to GitHub packages
        uses: actions/upload-artifact@v2
        with:
          name: linting-reports
          path: pylint.log
          retention-days: 5
  qaqc-checks-flake8:
    name: Run QA-QC checks with flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from remote origin.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Check linting using flake8 & generate report
        run: |
          pip install flake8
          flake8 --exit-zero --output-file=flake8.txt .
      - name: Upload flake8 errors to to GitHub packages.
        uses: actions/upload-artifact@v2
        with:
          name: flake8-reports
          path: flake8.txt
  qaqc-checks-bandit:
    name: Run QA-QC checks with Bandit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from remote origin
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Check linting using bandit & generate report
        run: |
          pip install bandit
          bandit --exit-zero --format json --output bandit-report.json --recursive .
      - name: Upload bandit errors to to GitHub packages.
        uses: actions/upload-artifact@v2
        with:
          name: bandit-reports
          path: bandit-report.json
          retention-days: 5
  unit-tests-pytest:
    name: Run unit tests with pytest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code from remote origin.
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup python version
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: 'x64'
      - name: Create cache depending on requirements file
        uses: actions/cache@v3.2.1
        id: cache
        with:
          path: ${{ env.pythonLocation }}
          key: ${{ env.pythonLocation }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ env.pythonLocation }}-pip-
      - name: Install dependencies & download data.
        if: steps.cache.outputs.cache-hit != 'false' # Need to change later
        run: |
          pip install --upgrade pip
          pip install -r pytest coverage coverage-badge pytest-html pytest-cov
      - name: Run pytest & generate test coverage report (unit tests).
        run: |
          coverage run -m pytest
          coverage xml
      - name: Upload test coverage report generated for unit tests using pytest to GitHub packages.
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage.xml
          retention-days: 5
